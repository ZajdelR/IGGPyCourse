Traceback (most recent call last):
  File "C:\Users\kamil\AppData\Roaming\Python\Python39\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\ProgramData\Anaconda3\lib\asyncio\base_events.py", line 647, in run_until_complete
    return future.result()
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\ProgramData\Anaconda3\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import glob
import os

path = './tmp/Mod8Data/'
files = glob.glob(path + '*.csv')

# create empty list to store dataframes
li = []

# loop through list of files and read each one into a dataframe and append to list
for f in files:
    print(f)
    # get filename
    stock = os.path.basename(f)
    # read in csv
    temp_df = pd.read_csv(f,sep='\s+')
    # create new column with filename
    temp_df['ticker'] = stock
    # data cleaning to remove the .csv
    temp_df['ticker'] = temp_df['ticker'].replace('.csv', '', regex=True)
    # append df to list
    li.append(temp_df)
    print(f'Successfully created dataframe for {stock} with shape {temp_df.shape}')

# concatenate our list of dataframes into one!
df = pd.concat(li, axis=0)
print(df.shape)
print(df)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mValueError[0m                                Traceback (most recent call last)
Input [1;32mIn [1][0m, in [0;36m<cell line: 27>[1;34m()[0m
[0;32m     24[0m     [38;5;28mprint[39m([38;5;124mf[39m[38;5;124m'[39m[38;5;124mSuccessfully created dataframe for [39m[38;5;132;01m{[39;00mstock[38;5;132;01m}[39;00m[38;5;124m with shape [39m[38;5;132;01m{[39;00mtemp_df[38;5;241m.[39mshape[38;5;132;01m}[39;00m[38;5;124m'[39m)
[0;32m     26[0m [38;5;66;03m# concatenate our list of dataframes into one![39;00m
[1;32m---> 27[0m df [38;5;241m=[39m [43mpd[49m[38;5;241;43m.[39;49m[43mconcat[49m[43m([49m[43mli[49m[43m,[49m[43m [49m[43maxis[49m[38;5;241;43m=[39;49m[38;5;241;43m0[39;49m[43m)[49m
[0;32m     28[0m [38;5;28mprint[39m(df[38;5;241m.[39mshape)
[0;32m     29[0m [38;5;28mprint[39m(df)

File [1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\util\_decorators.py:311[0m, in [0;36mdeprecate_nonkeyword_arguments.<locals>.decorate.<locals>.wrapper[1;34m(*args, **kwargs)[0m
[0;32m    305[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(args) [38;5;241m>[39m num_allow_args:
[0;32m    306[0m     warnings[38;5;241m.[39mwarn(
[0;32m    307[0m         msg[38;5;241m.[39mformat(arguments[38;5;241m=[39marguments),
[0;32m    308[0m         [38;5;167;01mFutureWarning[39;00m,
[0;32m    309[0m         stacklevel[38;5;241m=[39mstacklevel,
[0;32m    310[0m     )
[1;32m--> 311[0m [38;5;28;01mreturn[39;00m func([38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs)

File [1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\core\reshape\concat.py:347[0m, in [0;36mconcat[1;34m(objs, axis, join, ignore_index, keys, levels, names, verify_integrity, sort, copy)[0m
[0;32m    143[0m [38;5;129m@deprecate_nonkeyword_arguments[39m(version[38;5;241m=[39m[38;5;28;01mNone[39;00m, allowed_args[38;5;241m=[39m[[38;5;124m"[39m[38;5;124mobjs[39m[38;5;124m"[39m])
[0;32m    144[0m [38;5;28;01mdef[39;00m [38;5;21mconcat[39m(
[0;32m    145[0m     objs: Iterable[NDFrame] [38;5;241m|[39m Mapping[Hashable, NDFrame],
[1;32m   (...)[0m
[0;32m    154[0m     copy: [38;5;28mbool[39m [38;5;241m=[39m [38;5;28;01mTrue[39;00m,
[0;32m    155[0m ) [38;5;241m-[39m[38;5;241m>[39m DataFrame [38;5;241m|[39m Series:
[0;32m    156[0m     [38;5;124;03m"""[39;00m
[0;32m    157[0m [38;5;124;03m    Concatenate pandas objects along a particular axis with optional set logic[39;00m
[0;32m    158[0m [38;5;124;03m    along the other axes.[39;00m
[1;32m   (...)[0m
[0;32m    345[0m [38;5;124;03m    ValueError: Indexes have overlapping values: ['a'][39;00m
[0;32m    346[0m [38;5;124;03m    """[39;00m
[1;32m--> 347[0m     op [38;5;241m=[39m [43m_Concatenator[49m[43m([49m
[0;32m    348[0m [43m        [49m[43mobjs[49m[43m,[49m
[0;32m    349[0m [43m        [49m[43maxis[49m[38;5;241;43m=[39;49m[43maxis[49m[43m,[49m
[0;32m    350[0m [43m        [49m[43mignore_index[49m[38;5;241;43m=[39;49m[43mignore_index[49m[43m,[49m
[0;32m    351[0m [43m        [49m[43mjoin[49m[38;5;241;43m=[39;49m[43mjoin[49m[43m,[49m
[0;32m    352[0m [43m        [49m[43mkeys[49m[38;5;241;43m=[39;49m[43mkeys[49m[43m,[49m
[0;32m    353[0m [43m        [49m[43mlevels[49m[38;5;241;43m=[39;49m[43mlevels[49m[43m,[49m
[0;32m    354[0m [43m        [49m[43mnames[49m[38;5;241;43m=[39;49m[43mnames[49m[43m,[49m
[0;32m    355[0m [43m        [49m[43mverify_integrity[49m[38;5;241;43m=[39;49m[43mverify_integrity[49m[43m,[49m
[0;32m    356[0m [43m        [49m[43mcopy[49m[38;5;241;43m=[39;49m[43mcopy[49m[43m,[49m
[0;32m    357[0m [43m        [49m[43msort[49m[38;5;241;43m=[39;49m[43msort[49m[43m,[49m
[0;32m    358[0m [43m    [49m[43m)[49m
[0;32m    360[0m     [38;5;28;01mreturn[39;00m op[38;5;241m.[39mget_result()

File [1;32mC:\ProgramData\Anaconda3\lib\site-packages\pandas\core\reshape\concat.py:404[0m, in [0;36m_Concatenator.__init__[1;34m(self, objs, axis, join, keys, levels, names, ignore_index, verify_integrity, copy, sort)[0m
[0;32m    401[0m     objs [38;5;241m=[39m [38;5;28mlist[39m(objs)
[0;32m    403[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(objs) [38;5;241m==[39m [38;5;241m0[39m:
[1;32m--> 404[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mNo objects to concatenate[39m[38;5;124m"[39m)
[0;32m    406[0m [38;5;28;01mif[39;00m keys [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[0;32m    407[0m     objs [38;5;241m=[39m [38;5;28mlist[39m(com[38;5;241m.[39mnot_none([38;5;241m*[39mobjs))

[1;31mValueError[0m: No objects to concatenate
ValueError: No objects to concatenate

